<?xml version="1.0" encoding="UTF-8"?>
<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:jms="http://www.springframework.org/schema/jms"

        xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/jms
    http://www.springframework.org/schema/jms/spring-jms-3.2.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <util:properties id="appProperties">
        <prop key="ordersDestinationName">jms/queue/orders</prop>
        <prop key="deliveriesDestinationName">jms/queue/deliveries</prop>
    </util:properties>

    <bean id="remoteJndiTemplate" class="org.springframework.jndi.JndiTemplate" lazy-init="true">
        <property name="environment">
            <props>
                <!-- Provides a list of IP addresses and port numbers for HA-JNDI provider nodes in the cluster.
                    The client tries those providers one by one and uses the first one that responds.
                    Multiple endpoints as server1:1100,server2:1100,server3:1100,server4:1100
                    -->
                <prop key="java.naming.provider.url">jnp://localhost:1099</prop>
                <prop key="java.naming.factory.url.pkgs">org.jnp.interfaces:org.jboss.naming</prop>
                <prop key="java.naming.factory.initial">org.jnp.interfaces.NamingContextFactory</prop>
                <!-- Disable discovery, since we're suppling the provider urls -->
                <prop key="jnp.disableDiscovery">true</prop>
                <!-- Ref: https://docs.jboss.org/jbossas/docs/Server_Configuration_Guide/4/html/The_Naming_InitialContext_Factories-The_standard_naming_context_factory.html-->
                <!-- The connection timeout in milliseconds. The default value is 0 which means the connection will block until the VM TCP/IP layer times out. -->
                <prop key="jnp.timeout">5000</prop>
                <!-- The connected socket read timeout in milliseconds. The default value is 0 which means reads will block. This is the value passed to the Socket.setSoTimeout on the newly connected socket. -->
                <prop key="jnp.sotimeout">5000</prop>
            </props>
        </property>
    </bean>

    <bean id="remoteConnectionFactory" class="org.springframework.jndi.JndiObjectFactoryBean" lazy-init="true">
        <property name="jndiTemplate" ref="remoteJndiTemplate"/>
        <property name="jndiName" value="ConnectionFactory" />
<!--        <property name="jndiName" value="ClusteredConnectionFactory" />-->
        <!-- By default it looks up the jndi object on startup and failure results in context not getting loaded.
            Default message listener container will automatically issue retries once we're past the bean creation -->
        <property name="lookupOnStartup" value="false" />
        <property name="proxyInterface" value="javax.jms.ConnectionFactory" />
        <property name="cache" value="false" />
    </bean>

<!--    use the caching connection factory to allow for automatic recovery on connection failures-->
    <bean id="resilientCachingConnectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
        <property name="targetConnectionFactory" ref="remoteConnectionFactory"/>
        <property name="reconnectOnException" value="true"/>
<!--        Keep the default exception listener -->
<!--        <property name="exceptionListener" ref="jmsExceptionListener"/>-->
    </bean>

    <bean id="jmsExceptionListener" class="amitk.poc.jms.remote.down.ConnectionExceptionListener"/>

</beans>